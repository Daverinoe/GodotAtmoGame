[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D w; // Intermediate velocity (full of divergence)

void fragment(){
	
	// CONSIDER BOUNDARY CONDITIONS
	
	vec4 wL = texture(w, UV - vec2(1.0, 0.0) * SCREEN_PIXEL_SIZE);
	vec4 wR = texture(w, UV + vec2(1.0, 0.0) * SCREEN_PIXEL_SIZE);
	vec4 wB = texture(w, UV - vec2(0.0, 1.0) * SCREEN_PIXEL_SIZE);
	vec4 wT = texture(w, UV + vec2(0.0, 1.0) * SCREEN_PIXEL_SIZE);

	float divergence = (wR.x - wL.x + wT.y - wB.y) * 0.5;
//	COLOR = vec4(divergence) * 0.5 + 0.5;
	// Is there an obstacle?
	if(texture(w, UV).z > 0.0){
		COLOR = vec4(vec2(0.0), 0.0, 0.0);
	} else {
		COLOR = vec4(vec2(divergence), 0.0, 1.0);
	}
}"

[sub_resource type="ViewportTexture" id=2]
viewport_path = NodePath("fluid/AddForces(u)")

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/w = SubResource( 2 )
